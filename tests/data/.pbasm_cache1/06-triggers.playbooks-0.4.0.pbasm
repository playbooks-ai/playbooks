# ExampleProgram
This program validates user credentials through PIN and email verification, loads account information, and displays account balance with built-in validation triggers.

```python
@playbook(triggers=["T1:CND When user provides a PIN"])
async def Validation1(pin: str) -> bool:
  while len(pin) != 4 or not pin.isdigit():
    await Say("user","Sorry, that's not a valid PIN. Please try again.")
    messages = await WaitForMessage("human")
    pin = messages[0].content
  agent.state.variables["$pin"] = pin
  return pin
```

## Main() -> None
Main program flow that handles user authentication and account operations.
### Triggers
- T1:BGN At the beginning
### Steps
- 01:QUE Say(user, Ask user for their $pin:str)
- 02:YLD for user
- 03:QUE Say(user, Ask user for their $email:str)
- 04:YLD for user
- 05:EXE $x:int = 10
- 06:QUE $account:dict = LoadAccount(email=$email, pin=$pin)
- 07:YLD for call
- 08:EXE $x = $x * 2
- 09:QUE Say(user, Tell the user their account balance)
- 10:YLD for exit

## LoadAccount($email:str, $pin:str) -> dict
Loads user account information based on provided credentials.
### Steps
- 01:RET {"balance": 8999}

## Validation2($email:str) -> str
Validates provided email. Email address must conform to addr-spec in Section 3.4 of RFC 5322:
  addr-spec       =   local-part "@" domain
local-part      =   dot-atom / quoted-string / obs-local-part
domain          =   dot-atom / domain-literal / obs-domain
domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
dtext           =   %d33-90 /          ; Printable US-ASCII
                      %d94-126 /         ;  characters not including
                      obs-dtext          ;  "[", "]", or "\"
### Triggers
- T1:CND When user provides an email
### Steps
- 01:CND While $email is not valid
  - 01.01:QUE Say(user, Tell user email is not valid and ask for email again)
  - 01.02:YLD for user
  - 01.03:CND If the user gives up
    - 01.03.01:QUE Say(user, Apologize and end the conversation)
    - 01.03.02:YLD for exit
  - 01.04:JMP 01
- 02:QUE Say(user, Tell user email is not valid and ask for email again)
- 03:YLD for user
- 04:CND If the user gives up
  - 04.01:QUE Say(user, Apologize and end the conversation)
  - 04.02:YLD for exit
- 05:QUE Say(user, Apologize and end the conversation)
- 06:YLD for exit
- 07:RET $email

## TooBig() -> None
Handles cases when the x variable exceeds the threshold limit.
### Triggers
- T1:CND When $x > 15
### Steps
- 01:QUE Say(user, Tell user $x is too big)
- 02:RET

```public.json
[]
```