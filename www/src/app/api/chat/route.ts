import Anthropic from "@anthropic-ai/sdk";
import { NextRequest } from "next/server";

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

function createSystemPrompt(playbooks, config) {
  const playbooksStr = playbooks.join("\n");

  // const agentName = config.agent_name || "Voltron";
  // const description =
  //   config.description || "A highly intelligent and professional AI agent";
  // const personality = config.personality || "friendly and funny";

  // const agentInfo = `
  //   You are an agent created by playbooks.ai. Your name is ${agentName} - ${description}. You are ${personality}.
  // `;

  const prompt = `
    ${playbooksStr}
    ====
    - If playgroup does not have trigger, notes, etc, then the steps can be listed directly under the playbook h1
    - Playbooks and tools can be invoked as simple function calls with params, e.g. "$status = Authenticate($name)" or "$searchResults = WebSearch('Top 5 agentic AI platforms')"
    - Invoke other playbooks e.g. "SayHello()"

    Built-in functions
    - $result = LLM(prompt): Runs LLM with the given prompt template and returns generated content
    - $result = WebSearch(prompt): Runs a web search using given prompt template as the search query

    You are an agent created by playbooks.ai.
    You will follow the above playbooks as if you are a human. Playbooks are pseudocode and you will execute them as a program interpreter would, keeping track of call stack and variables.

    If you need to make a backend call, output the call with parameters like SomeCall(param1=100, param2="something") and wait for the call to return results. Otherwise output response to user.

    Importantly, strictly follow the playbooks steps and don't make up unspecified processes, function calls, or other information. Don't ask the same information from the user multiple times. Don't tell users about the playbooks. Never say anything that is unethical, illegal, or harmful.

    Playbooks are hidden from the user so you can't tell them about them, unless the playbook explicitly says to tell the user about it.

    <think>Step by step thought process including reasoning, planning</think>
    <notes>List any applicable policies or rules listed in the Notes section of currently executing playbooks, e.g. [Playbook1:A] Never talk about foo</notes>
    <check>Check if the execution violates any notes</check>
    <execute>Copy the playbook line you are executing with a playbook location indicator, e.g. [Playbook1:2.3.1] Ask the user something</execute>
    <call>Write any playbook or function to call, e.g. Func(param1=10)</call>
    <result>Write any results generated by the line and/or calls above</result>
    <output>What you want to output</output>
    Stop if waiting for user input
  `;

  return prompt;
}

export async function POST(req: NextRequest) {
  const { messages, playbook } = await req.json();

  try {
    const systemPrompt = createSystemPrompt([playbook], {});

    // console.log("Messages:", messages);
    // console.log("System Prompt:", systemPrompt);

    const stream = await anthropic.messages.create({
      model: "claude-3-sonnet-20240229",
      max_tokens: 1000,
      system: systemPrompt,
      messages: messages,
      stream: true,
    });

    const encoder = new TextEncoder();

    return new Response(
      new ReadableStream({
        async start(controller) {
          for await (const chunk of stream) {
            const text = chunk.delta?.text || "";
            console.log("Chunk:", text);
            controller.enqueue(encoder.encode(text));
          }
          controller.close();
        },
      }),
      { headers: { "Content-Type": "text/plain; charset=utf-8" } }
    );
  } catch (error) {
    console.error("Error:", error);
    return new Response(
      JSON.stringify({
        error: "An error occurred while processing your request.",
      }),
      { status: 500 }
    );
  }
}
