Here is an example natural language program -

# Web Search Chat Agent

```tools
def SearchWeb(query: str, topic: str="general"):
    """
    Search the web for the given query.
    """
    from tavily import TavilyClient
    import os
    tavily_client = TavilyClient(api_key=os.environ.get("TAVILY_API_KEY"))
    print(f"Searching web for {query}")
    search_result = tavily_client.search(query, limit=1, topic=topic)
    return search_result
```

## Main
### Trigger
At the beginning
### Steps
- Introduce yourself as a knowledge wizard who can use internet search to answer questions
- Ask how the user is doing and what you can help with
- As long as the user wants to continue the conversation
    - If you don't have enough information to answer the user's question
        - Gather relevant information
        - Respond to user with a thoghtful answer using gathered information and search results. The answer should be well written and include citations where necessary.
    - Otherwise
        - Respond to the user with a friendly, professional response and wait for the user to say something
- Say goodbye to the user

## Gather relevant information
### Steps
- until you have all the information you need to answer the user's question (up to 2 attempts)
    - think step by step how you would use web searches to get relevant information you don't have, e.g. to answer how old was the ruler who built Taj Mahal when it was built, I will first do two independent search queries to get two facets of information (When was Taj Mahal built, Who built Taj Mahal). After getting the answers, I'll construct next set of queries using the answers.
    - list a batch of 1-3 web search queries based on your plan; note that each query must inquire separate, non-overlapping parts of the information you need
    - for each query
        - search the web with that query and a "general" or "news" topic
    - wait for the search results
    - gather relevant information from the search results as a paragraph

### Notes
- Use "news" topic for queries about recent events

## Reject NSFW Query
### Trigger
- When the user asks for information about NSFW content
### Steps
- Inform the user that the agent cannot provide information about NSFW content and wait for the user to say something else

====

The #H1 indicates program name. A set of python functions are defined in ```tools```. Then there are several #H2 - these are playbooks.

- H2 is the playbook name
- playbook steps are in the "Steps" H3
  - 3-Letter Steps Command Codes
    - `EXE`: You will execute this step (e.g., `$x = Reverse($y)`)
    - `QUE`: Queue a function call
    - `LOP`: Loop (e.g., `LOP For each $item in $list`)
    - `CND`: Conditional or if or an else statement (e.g., `CND If user is unhappy`)
    - `CHK`: Check or validation line that corresponds to a note from the Notes section (e.g., `CHK Check if $age is more than 58`)
    - `RET`: Return from current playbook, optionally returning a value
    - `YLD`: Yield control back to the system. Stop processing.
- Special cases, validations, etc are in "Notes" H3
- Variables
  - Allowed types are boolean, strings, numbers and null
- Output
  - Parsable, valid json in triple backticks and nothing else
- Say()
  - Whatever you Say() will be shown to the user
  - When queuing multiple Say() calls, make sure they all connect conversationally


====

Here is another example natural language program -

# Agent
You are a customer support agent for an online store. You are highly trained and have a good understanding of the product and services. You will speak with a professional and friendly tone. Follow the brand voice which is energetic, "Let's do it", lively attitude. Use Say() to respond to the user.

```tools

def Handoff():
    return "Successfully handed off to a human agent"

def AuthenticateUser(email, pin):
    return {"success": False, "error": "Account not found"}

def AuthenticateUser2(ssn, dob):
    return {"success": True, "authToken": "1234"}

def CheckOrderStatus(orderId):
    return {"orderStatus": "pending", "expectedDeliveryDate": "2025-03-01"}

```
## Begin

### Trigger
- When the agent starts running

### Steps
- Welcome the user and ask how you can help them

## CheckOrderStatusMain

### Trigger
- When the user asks to get order status

### Steps
- If user is not authenticated, $authToken = AuthenticateUserFlow()
- If $authToken is valid:
  - CheckOrderStatusFlow($authToken)

## CheckOrderStatusFlow($authToken)

### Trigger
- When the user is authenticated and requests order status

### Steps
- Ask user for $orderID
- $orderStatus = GetOrderStatus($orderID)
- Extract $expectedDeliveryDate from $orderStatus
- Say("Your order {$orderID} is expected to be delivered on {$expectedDeliveryDate}.")

### Notes
- The $orderStatus dictionary includes the keys: orderID, expectedDeliveryDate.
- Always confirm that $authToken is valid before calling GetOrderStatus.

## AuthenticateUserFlow

### Trigger
- When the user is not yet authenticated but requests an order status

### Steps
- Ask user for $email and $pin
- $authToken = AuthenticateUser($email, $pin)
- If $authToken is invalid, try once by asking to verify $email and $pin
- If $authToken is still invalid:
  - Ask user for $ssn and date of birth $dob
  - $authToken = AuthenticateUser2($ssn, $dob)
  - If still invalid:
    - Say(Apologize and ask user to contact support.)
    - return (Not authenticated)
- return $authToken

### Notes
- If user's email is a throwaway email account, ask for a different email

## Do not keep asking for same data more than 2 times

### Trigger
- Step in the flow when the user has provided invalid answer for the same question two times

### Steps
- Ask user if they want to be connected with a human
- If so, HandoffPlaybook()

## HandoffPlaybook

### Trigger
- When the user wants to be connected with a human
- When no suitable playbook is found to help user

### Steps
- Apologize for any inconvience and ask user if they want to be connected with a human, unless they already said asked for it explicitly.
- If they want to be connected with a human
  - Handoff()
- else
  - Apologize that you were not able to help them and the support team will be happy to help if needed.
- End conversation

## Validate pin
### Trigger
- When the user provides a pin

### Steps
- $pin is valid if the digits add up to 10
- If $pin is invalid
  - ask user to provide a new one
  - check validation again

====

I want you to write a natural language program for a given task.

Here is the task -

- Ask user where they are from.
- Get that location's current weather and latest local news.
- Give that information to the user in a nicely formatted way.

====

First, think step by step how you would write the program - what python functions it will have, what playbooks it will have, what caveats and special cases you would consider, what common sense assumptions you would make when executing the program.
Then write the program adhering to the following guidelines -
- Function implementations should just return mocked data
- Each playbook represent instructions on how to do a task, and can call other playbooks and tools.
- Playbooks should be written like a non-technical user would write instructions
- Playbooks are executed step by step and each step must do one task, put all relevant details for the task in the step
- Steps should suggest what python functions or other playbooks to use, e.g. "Get order status for the provided order id", rather than using programming syntax like GetOrderStatus($orderId)
- Say() should have instruction about what to say rather than actual text, e.g. Say(Greet the user), rather than Say("Hello there!")
- Write playbooks such that a non-technical user with common sense can understand and follow them
- Focus on maximum readability and ease of understanding when writing playbooks.

