name: Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run with tmate debugging enabled'
        required: false
        default: false

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: (Playbooks package) Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install

    - name: Check cache directory
      run: |
        echo "Checking .llm_cache_test directory:"
        ls -la .llm_cache_test/ || echo "Cache directory not found"
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la
        
    - name: Validate LLM cache
      env:
        ENVIRONMENT: test
        LLM_CACHE_ENABLED: "true"
        LLM_CACHE_TYPE: "disk"
        LLM_CACHE_PATH: ".llm_cache_test"
        ANTHROPIC_API_KEY: "test-key"
        MODEL: "claude-sonnet-4-20250514"
      run: |
        echo "=== Validating LLM Cache ==="
        cat > validate_cache.py << 'EOF'
        import os
        import sys
        from diskcache import Cache
        
        cache_path = os.environ.get('LLM_CACHE_PATH', '.llm_cache_test')
        print(f'Cache path: {cache_path}')
        print(f'Cache path exists: {os.path.exists(cache_path)}')
        
        if os.path.exists(cache_path):
            try:
                cache = Cache(cache_path)
                print(f'Cache size: {len(cache)} entries')
                
                # Show first 5 cache keys
                keys = list(cache.iterkeys())
                print(f'Total cache keys: {len(keys)}')
                if keys:
                    print('Sample cache keys:')
                    for key in keys[:5]:
                        print(f'  - {key}')
                else:
                    print('WARNING: Cache exists but is empty!')
                    sys.exit(1)
                    
                # Test cache accessibility
                test_key = 'test_validation_key'
                cache[test_key] = 'test_value'
                if cache.get(test_key) == 'test_value':
                    print('Cache read/write test: PASSED')
                    del cache[test_key]
                else:
                    print('ERROR: Cache read/write test failed!')
                    sys.exit(1)
                    
            except Exception as e:
                print(f'ERROR: Failed to access cache: {e}')
                sys.exit(1)
        else:
            print('ERROR: Cache directory does not exist!')
            sys.exit(1)
        EOF
        poetry run python validate_cache.py
        
    - name: (Playbooks package) Run tests
      env:
        ENVIRONMENT: test
        LLM_CACHE_ENABLED: "true"
        LLM_CACHE_TYPE: "disk"
        LLM_CACHE_PATH: ".llm_cache_test"
        ANTHROPIC_API_KEY: "test-key"  # Tests should use cache, not make actual API calls
        MODEL: "claude-sonnet-4-20250514"  # Match the model in .env.test
      run: |
        poetry run pytest tests/ -vv --cov=src/playbooks --cov-report=xml
        
    - name: Setup tmate session on failure
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true
        
    - name: Upload Playbooks package coverage
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: playbooks-ai/playbooks
        fail_ci_if_error: true
        flags: playbooks-package
